The try-with-resources feature, introduced in Java 7, provides a streamlined way to work with resources that need to be closed after their operations are complete. The main goal is to ensure resources are closed properly and reduce boilerplate code. Here's a rundown of its capabilities:

    Automatically Closes Resources: The primary feature of try-with-resources is the automatic closing of resources. Any resource declared within the parentheses of a try block is automatically closed at the end of the block.

    Handles Multiple Resources: You can declare multiple resources within the parentheses, separated by semicolons:

    java

try (
    FileInputStream fis = new FileInputStream("input.txt");
    FileOutputStream fos = new FileOutputStream("output.txt")
) {
    // Use fis and fos
}

Both fis and fos will be closed at the end of the block, even if exceptions are thrown.

Reduces Boilerplate: Prior to this feature, you'd often see a lot of boilerplate code, especially in the finally block to handle resource closure. With try-with-resources, this is handled automatically, reducing boilerplate and making the code cleaner.

Suppressed Exceptions: If exceptions are thrown both in the try block and during the closing of resources, the exception from the try block is thrown, but the exception from the closing process is added to the list of suppressed exceptions. You can retrieve these using the getSuppressed method of the main exception.

Works with Any AutoCloseable: Try-with-resources is not just for file handling. It works with any class that implements the AutoCloseable or Closeable interface. This includes many resources like InputStream, OutputStream, Reader, Writer, Socket, ServerSocket, Connection (from JDBC), and more.

Final or Effectively Final Variables: Starting with Java 9, try-with-resources has been enhanced to work with final or effectively final variables. This means you can use a resource in a try-with-resources statement without re-declaring it if it's final or effectively final.

java

    FileInputStream fis = new FileInputStream("input.txt");
    try (fis) {
        // Use fis
    }

    Clearer Exception Handling: By ensuring that resources are closed cleanly and exceptions are handled (or suppressed) appropriately, the try-with-resources construct aids in clearer, more predictable exception handling.

In summary, try-with-resources simplifies resource management in Java by ensuring resources are always closed properly, reducing boilerplate code, and providing clearer exception handling. Always consider using it when dealing with AutoCloseable or Closeable resources to make your code safer and more readable.













//        double change = 84.93;
//        double[] moneyChange = {20.00, 10.00, 5.0, 1.00, 0.25, 0.10, 0.05, 0.01};
//        String[] wordChange = {"Twenties", "Ten", "Five", "Dollar", "Quarter", "Dime", "Nickel", "Penny"};
//        String textChange = "";
//        int counter = 0;
//        while(change >= 0 && counter <= 7){
//            int div = (int)(change / moneyChange[counter]);
//            if (div > 0){
//                change = change - (div * moneyChange[counter]);
//                textChange += "(" + (int)div + ") " + wordChange[counter] + " ";
//            }
//            counter++;
//        }
//
//        System.out.println(textChange);


//        change=change%100;
//        int quarters = Math.round(change/25);
//        change=change%25;
//        int dimes = Math.round(change/10);
//        change=change%10;
//        int nickels = Math.round(change/5);
//        change=change%5;
//        int pennies = Math.round(change/1);

//        System.out.println("Quarters: " + quarters);
//        System.out.println("Dimes: " + dimes);
//        System.out.println("Nickels: " + nickels);
//        System.out.println("Pennies: " + pennies);

//        FileManager fm = new FileManager();
//        StringBuilder filetext = fm.read("test1.txt");
//        System.out.println(filetext);
//        TestGui test = new TestGui(400, 400);

//        Map<String, String[]> dict = new HashMap<>();
//
//        dict.put("a2", new String[]{"a2", "b2"});
//        dict.put("a1", new String[]{"a1", "b1"});
//        dict.put("a4", new String[]{"a4", "b4"});
//        dict.put("A4", new String[]{"A4", "B4"});
//        dict.put("c3", new String[]{"c3", "b3"});
//        dict.put("d3", new String[]{"d3", "b3"});
//        List<String> alist = new ArrayList<>(dict.keySet());
//        Collections.sort(alist);;
//        for(String each: alist){
//            System.out.println(Arrays.toString(dict.get(each)));
//        }
//        System.out.println(alist);